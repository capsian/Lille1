Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 22.74      0.03     0.03  9711423     0.00     0.00  mlog
 18.19      0.05     0.02  1578102     0.00     0.00  eval_litteral
 18.19      0.07     0.02   485572     0.00     0.00  evaluate_statement
  9.09      0.08     0.01  2913420     0.00     0.00  pop_stack
  9.09      0.09     0.01  1092532     0.00     0.00  seek_in_env
  9.09      0.10     0.01  1092531     0.00     0.00  eval_binaryop
  9.09      0.11     0.01   242786     0.00     0.00  table_create
  4.55      0.11     0.01        1     5.00     5.00  set_verbose
  0.00      0.11     0.00  2913420     0.00     0.00  evaluate_expression
  0.00      0.11     0.00  2913420     0.00     0.00  push_stack
  0.00      0.11     0.00  2306460     0.00     0.00  display_stack
  0.00      0.11     0.00  2063674     0.00     0.00  display_env
  0.00      0.11     0.00  1092532     0.00     0.00  table_get
  0.00      0.11     0.00   485571     0.00     0.00  evaluate_env
  0.00      0.11     0.00   242786     0.00     0.00  destroy_entries_stack
  0.00      0.11     0.00   242786     0.00     0.00  eval_call
  0.00      0.11     0.00   242786     0.00     0.00  table_add
  0.00      0.11     0.00   242786     0.00     0.00  table_destroy
  0.00      0.11     0.00   242785     0.00     0.00  eval_ifthenelse
  0.00      0.11     0.00   242785     0.00     0.00  eval_return2
  0.00      0.11     0.00      251     0.00     0.00  read_byte
  0.00      0.11     0.00       84     0.00     0.00  read_word16
  0.00      0.11     0.00       22     0.00     0.00  read_token
  0.00      0.11     0.00       14     0.00     0.00  init_litteral
  0.00      0.11     0.00        9     0.00     0.00  add_node_to_list
  0.00      0.11     0.00        9     0.00     0.00  read_expression
  0.00      0.11     0.00        9     0.00     0.00  read_word32
  0.00      0.11     0.00        6     0.00     0.00  init_binaryop
  0.00      0.11     0.00        5     0.00     0.00  read_statement
  0.00      0.11     0.00        4     0.00     0.00  init_call
  0.00      0.11     0.00        4     0.00     0.00  read_expression_list
  0.00      0.11     0.00        4     0.00     0.00  read_statement_list
  0.00      0.11     0.00        2     0.00     0.00  init_return2
  0.00      0.11     0.00        1     0.00     0.00  add_token_to_list
  0.00      0.11     0.00        1     0.00     0.00  eval_funct
  0.00      0.11     0.00        1     0.00     0.00  init_environnement
  0.00      0.11     0.00        1     0.00     0.00  init_funct
  0.00      0.11     0.00        1     0.00     0.00  init_ifthenelse
  0.00      0.11     0.00        1     0.00     0.00  print_value
  0.00      0.11     0.00        1     0.00     0.00  read_token_list

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 9.09% of 0.11 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.11                 main [1]
                0.03    0.08       1/1           evaluate_env <cycle 2> [17]
                0.01    0.00       1/1           set_verbose [13]
                0.00    0.00       1/1           init_environnement [20]
                0.00    0.00      11/9711423     mlog [5]
                0.00    0.00       1/1           read_statement_list <cycle 1> [37]
                0.00    0.00       1/242786      table_destroy [14]
                0.00    0.00       1/2306460     display_stack [25]
-----------------------------------------------
[2]     95.5    0.03    0.08       1+5705449 <cycle 2 as a whole> [2]
                0.00    0.04 2913420             evaluate_expression <cycle 2> [3]
                0.01    0.01 1092531             eval_binaryop <cycle 2> [6]
                0.00    0.02  242786             eval_call <cycle 2> [7]
                0.02    0.00  485572             evaluate_statement <cycle 2> [8]
                0.00    0.00  242785             eval_ifthenelse <cycle 2> [15]
                0.00    0.00  485571             evaluate_env <cycle 2> [17]
                0.00    0.00  242785             eval_return2 <cycle 2> [19]
-----------------------------------------------
                                   2             evaluate_statement <cycle 2> [8]
                              242785             eval_return2 <cycle 2> [19]
                              242785             eval_ifthenelse <cycle 2> [15]
                              242786             eval_call <cycle 2> [7]
                             2185062             eval_binaryop <cycle 2> [6]
[3]     34.9    0.00    0.04 2913420         evaluate_expression <cycle 2> [3]
                0.02    0.02 1578102/1578102     eval_litteral [4]
                0.00    0.00       1/1           eval_funct [23]
                             1092531             eval_binaryop <cycle 2> [6]
                              242786             eval_call <cycle 2> [7]
-----------------------------------------------
                0.02    0.02 1578102/1578102     evaluate_expression <cycle 2> [3]
[4]     34.9    0.02    0.02 1578102         eval_litteral [4]
                0.01    0.01  849747/1092532     seek_in_env [9]
                0.00    0.00 1578102/9711423     mlog [5]
                0.00    0.00 1578102/2913420     push_stack [24]
-----------------------------------------------
                0.00    0.00       1/9711423     eval_funct [23]
                0.00    0.00       2/9711423     evaluate_statement <cycle 2> [8]
                0.00    0.00       7/9711423     read_expression <cycle 1> [22]
                0.00    0.00      11/9711423     main [1]
                0.00    0.00  242785/9711423     destroy_entries_stack [16]
                0.00    0.00  242785/9711423     eval_return2 <cycle 2> [19]
                0.00    0.00  242786/9711423     table_create [10]
                0.00    0.00  242786/9711423     table_destroy [14]
                0.00    0.00  242786/9711423     table_add [18]
                0.00    0.00  485570/9711423     eval_ifthenelse <cycle 2> [15]
                0.00    0.00  485572/9711423     evaluate_env <cycle 2> [17]
                0.00    0.00  971141/9711423     eval_call <cycle 2> [7]
                0.00    0.00 1578102/9711423     eval_litteral [4]
                0.00    0.00 1699493/9711423     eval_binaryop <cycle 2> [6]
                0.01    0.00 3277596/9711423     table_get [12]
[5]     22.7    0.03    0.00 9711423         mlog [5]
-----------------------------------------------
                             1092531             evaluate_expression <cycle 2> [3]
[6]     19.9    0.01    0.01 1092531         eval_binaryop <cycle 2> [6]
                0.01    0.00 2185062/2913420     pop_stack [11]
                0.00    0.00 1699493/9711423     mlog [5]
                0.00    0.00 1092531/2913420     push_stack [24]
                             2185062             evaluate_expression <cycle 2> [3]
-----------------------------------------------
                              242786             evaluate_expression <cycle 2> [3]
[7]     18.9    0.00    0.02  242786         eval_call <cycle 2> [7]
                0.01    0.00  242785/242786      table_create [10]
                0.00    0.00  242785/1092532     seek_in_env [9]
                0.00    0.00  971141/9711423     mlog [5]
                0.00    0.00  242785/242786      table_destroy [14]
                0.00    0.00  242786/2913420     pop_stack [11]
                0.00    0.00  242785/242786      table_add [18]
                0.00    0.00  485570/2063674     display_env [26]
                0.00    0.00  485570/2306460     display_stack [25]
                0.00    0.00  242785/2913420     push_stack [24]
                0.00    0.00       1/1           print_value [42]
                              242786             evaluate_expression <cycle 2> [3]
                              242785             evaluate_env <cycle 2> [17]
-----------------------------------------------
                              485572             evaluate_env <cycle 2> [17]
[8]     18.2    0.02    0.00  485572         evaluate_statement <cycle 2> [8]
                0.00    0.00       2/2913420     pop_stack [11]
                0.00    0.00       2/9711423     mlog [5]
                              242785             eval_return2 <cycle 2> [19]
                              242785             eval_ifthenelse <cycle 2> [15]
                                   2             evaluate_expression <cycle 2> [3]
-----------------------------------------------
                0.00    0.00  242785/1092532     eval_call <cycle 2> [7]
                0.01    0.01  849747/1092532     eval_litteral [4]
[9]     16.8    0.01    0.01 1092532         seek_in_env [9]
                0.00    0.01 1092532/1092532     table_get [12]
-----------------------------------------------
                0.00    0.00       1/242786      init_environnement [20]
                0.01    0.00  242785/242786      eval_call <cycle 2> [7]
[10]     9.7    0.01    0.00  242786         table_create [10]
                0.00    0.00  242786/9711423     mlog [5]
-----------------------------------------------
                0.00    0.00       2/2913420     evaluate_statement <cycle 2> [8]
                0.00    0.00  242785/2913420     destroy_entries_stack [16]
                0.00    0.00  242785/2913420     eval_ifthenelse <cycle 2> [15]
                0.00    0.00  242786/2913420     eval_call <cycle 2> [7]
                0.01    0.00 2185062/2913420     eval_binaryop <cycle 2> [6]
[11]     9.1    0.01    0.00 2913420         pop_stack [11]
-----------------------------------------------
                0.00    0.01 1092532/1092532     seek_in_env [9]
[12]     7.7    0.00    0.01 1092532         table_get [12]
                0.01    0.00 3277596/9711423     mlog [5]
                0.00    0.00 1092532/2306460     display_stack [25]
                0.00    0.00 1092532/2063674     display_env [26]
-----------------------------------------------
                0.01    0.00       1/1           main [1]
[13]     4.5    0.01    0.00       1         set_verbose [13]
-----------------------------------------------
                0.00    0.00       1/242786      main [1]
                0.00    0.00  242785/242786      eval_call <cycle 2> [7]
[14]     1.9    0.00    0.00  242786         table_destroy [14]
                0.00    0.00  242786/242786      destroy_entries_stack [16]
                0.00    0.00  242786/9711423     mlog [5]
-----------------------------------------------
                              242785             evaluate_statement <cycle 2> [8]
[15]     1.9    0.00    0.00  242785         eval_ifthenelse <cycle 2> [15]
                0.00    0.00  485570/9711423     mlog [5]
                0.00    0.00  242785/2913420     pop_stack [11]
                0.00    0.00  242785/2306460     display_stack [25]
                              242785             evaluate_expression <cycle 2> [3]
                              242785             evaluate_env <cycle 2> [17]
-----------------------------------------------
                0.00    0.00  242786/242786      table_destroy [14]
[16]     1.3    0.00    0.00  242786         destroy_entries_stack [16]
                0.00    0.00  242785/2913420     pop_stack [11]
                0.00    0.00  242785/9711423     mlog [5]
-----------------------------------------------
                              242785             eval_call <cycle 2> [7]
                              242785             eval_ifthenelse <cycle 2> [15]
                0.03    0.08       1/1           main [1]
[17]     1.1    0.00    0.00  485571         evaluate_env <cycle 2> [17]
                0.00    0.00  485572/9711423     mlog [5]
                0.00    0.00  485572/2063674     display_env [26]
                0.00    0.00  485572/2306460     display_stack [25]
                              485572             evaluate_statement <cycle 2> [8]
-----------------------------------------------
                0.00    0.00       1/242786      eval_funct [23]
                0.00    0.00  242785/242786      eval_call <cycle 2> [7]
[18]     0.6    0.00    0.00  242786         table_add [18]
                0.00    0.00  242786/9711423     mlog [5]
-----------------------------------------------
                              242785             evaluate_statement <cycle 2> [8]
[19]     0.6    0.00    0.00  242785         eval_return2 <cycle 2> [19]
                0.00    0.00  242785/9711423     mlog [5]
                              242785             evaluate_expression <cycle 2> [3]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[20]     0.0    0.00    0.00       1         init_environnement [20]
                0.00    0.00       1/242786      table_create [10]
-----------------------------------------------
[21]     0.0    0.00    0.00       1+21      <cycle 1 as a whole> [21]
                0.00    0.00       9+16          read_expression <cycle 1> [22]
                0.00    0.00       5             read_statement <cycle 1> [34]
                0.00    0.00       4             read_statement_list <cycle 1> [37]
                0.00    0.00       4             read_expression_list <cycle 1> [36]
-----------------------------------------------
                                  16             read_expression <cycle 1> [22]
                                   4             read_expression_list <cycle 1> [36]
                                   5             read_statement <cycle 1> [34]
[22]     0.0    0.00    0.00       9+16      read_expression <cycle 1> [22]
                0.00    0.00       7/9711423     mlog [5]
                0.00    0.00      23/251         read_byte [27]
                0.00    0.00      21/22          read_token [29]
                0.00    0.00      14/14          init_litteral [30]
                0.00    0.00       6/6           init_binaryop [33]
                0.00    0.00       4/4           init_call [35]
                0.00    0.00       1/1           read_token_list [43]
                0.00    0.00       1/1           init_funct [40]
                                   4             read_expression_list <cycle 1> [36]
                                   1             read_statement_list <cycle 1> [37]
                                  16             read_expression <cycle 1> [22]
-----------------------------------------------
                0.00    0.00       1/1           evaluate_expression <cycle 2> [3]
[23]     0.0    0.00    0.00       1         eval_funct [23]
                0.00    0.00       1/242786      table_add [18]
                0.00    0.00       1/9711423     mlog [5]
                0.00    0.00       2/2913420     push_stack [24]
-----------------------------------------------
                0.00    0.00       2/2913420     eval_funct [23]
                0.00    0.00  242785/2913420     eval_call <cycle 2> [7]
                0.00    0.00 1092531/2913420     eval_binaryop <cycle 2> [6]
                0.00    0.00 1578102/2913420     eval_litteral [4]
[24]     0.0    0.00    0.00 2913420         push_stack [24]
-----------------------------------------------
                0.00    0.00       1/2306460     main [1]
                0.00    0.00  242785/2306460     eval_ifthenelse <cycle 2> [15]
                0.00    0.00  485570/2306460     eval_call <cycle 2> [7]
                0.00    0.00  485572/2306460     evaluate_env <cycle 2> [17]
                0.00    0.00 1092532/2306460     table_get [12]
[25]     0.0    0.00    0.00 2306460         display_stack [25]
-----------------------------------------------
                0.00    0.00  485570/2063674     eval_call <cycle 2> [7]
                0.00    0.00  485572/2063674     evaluate_env <cycle 2> [17]
                0.00    0.00 1092532/2063674     table_get [12]
[26]     0.0    0.00    0.00 2063674         display_env [26]
-----------------------------------------------
                0.00    0.00       5/251         read_statement <cycle 1> [34]
                0.00    0.00      23/251         read_expression <cycle 1> [22]
                0.00    0.00      55/251         read_token [29]
                0.00    0.00     168/251         read_word16 [28]
[27]     0.0    0.00    0.00     251         read_byte [27]
-----------------------------------------------
                0.00    0.00      18/84          read_word32 [32]
                0.00    0.00      66/84          read_token [29]
[28]     0.0    0.00    0.00      84         read_word16 [28]
                0.00    0.00     168/251         read_byte [27]
-----------------------------------------------
                0.00    0.00       1/22          read_token_list [43]
                0.00    0.00      21/22          read_expression <cycle 1> [22]
[29]     0.0    0.00    0.00      22         read_token [29]
                0.00    0.00      66/84          read_word16 [28]
                0.00    0.00      55/251         read_byte [27]
-----------------------------------------------
                0.00    0.00      14/14          read_expression <cycle 1> [22]
[30]     0.0    0.00    0.00      14         init_litteral [30]
-----------------------------------------------
                0.00    0.00       4/9           read_expression_list <cycle 1> [36]
                0.00    0.00       5/9           read_statement_list <cycle 1> [37]
[31]     0.0    0.00    0.00       9         add_node_to_list [31]
-----------------------------------------------
                0.00    0.00       1/9           read_token_list [43]
                0.00    0.00       4/9           read_expression_list <cycle 1> [36]
                0.00    0.00       4/9           read_statement_list <cycle 1> [37]
[32]     0.0    0.00    0.00       9         read_word32 [32]
                0.00    0.00      18/84          read_word16 [28]
-----------------------------------------------
                0.00    0.00       6/6           read_expression <cycle 1> [22]
[33]     0.0    0.00    0.00       6         init_binaryop [33]
-----------------------------------------------
                                   5             read_statement_list <cycle 1> [37]
[34]     0.0    0.00    0.00       5         read_statement <cycle 1> [34]
                0.00    0.00       5/251         read_byte [27]
                0.00    0.00       2/2           init_return2 [38]
                0.00    0.00       1/1           init_ifthenelse [41]
                                   5             read_expression <cycle 1> [22]
                                   2             read_statement_list <cycle 1> [37]
-----------------------------------------------
                0.00    0.00       4/4           read_expression <cycle 1> [22]
[35]     0.0    0.00    0.00       4         init_call [35]
-----------------------------------------------
                                   4             read_expression <cycle 1> [22]
[36]     0.0    0.00    0.00       4         read_expression_list <cycle 1> [36]
                0.00    0.00       4/9           read_word32 [32]
                0.00    0.00       4/9           add_node_to_list [31]
                                   4             read_expression <cycle 1> [22]
-----------------------------------------------
                                   1             read_expression <cycle 1> [22]
                                   2             read_statement <cycle 1> [34]
                0.00    0.00       1/1           main [1]
[37]     0.0    0.00    0.00       4         read_statement_list <cycle 1> [37]
                0.00    0.00       5/9           add_node_to_list [31]
                0.00    0.00       4/9           read_word32 [32]
                                   5             read_statement <cycle 1> [34]
-----------------------------------------------
                0.00    0.00       2/2           read_statement <cycle 1> [34]
[38]     0.0    0.00    0.00       2         init_return2 [38]
-----------------------------------------------
                0.00    0.00       1/1           read_token_list [43]
[39]     0.0    0.00    0.00       1         add_token_to_list [39]
-----------------------------------------------
                0.00    0.00       1/1           read_expression <cycle 1> [22]
[40]     0.0    0.00    0.00       1         init_funct [40]
-----------------------------------------------
                0.00    0.00       1/1           read_statement <cycle 1> [34]
[41]     0.0    0.00    0.00       1         init_ifthenelse [41]
-----------------------------------------------
                0.00    0.00       1/1           eval_call <cycle 2> [7]
[42]     0.0    0.00    0.00       1         print_value [42]
-----------------------------------------------
                0.00    0.00       1/1           read_expression <cycle 1> [22]
[43]     0.0    0.00    0.00       1         read_token_list [43]
                0.00    0.00       1/9           read_word32 [32]
                0.00    0.00       1/22          read_token [29]
                0.00    0.00       1/1           add_token_to_list [39]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [31] add_node_to_list       [33] init_binaryop          [34] read_statement
  [39] add_token_to_list      [35] init_call              [37] read_statement_list
  [16] destroy_entries_stack  [20] init_environnement     [29] read_token
  [26] display_env            [40] init_funct             [43] read_token_list
  [25] display_stack          [41] init_ifthenelse        [28] read_word16
   [6] eval_binaryop          [30] init_litteral          [32] read_word32
   [7] eval_call              [38] init_return2            [9] seek_in_env
  [23] eval_funct              [5] mlog                   [13] set_verbose
  [15] eval_ifthenelse        [11] pop_stack              [18] table_add
   [4] eval_litteral          [42] print_value            [10] table_create
  [19] eval_return2           [24] push_stack             [14] table_destroy
  [17] evaluate_env           [27] read_byte              [12] table_get
   [3] evaluate_expression    [22] read_expression        [21] <cycle 1>
   [8] evaluate_statement     [36] read_expression_list    [2] <cycle 2>
