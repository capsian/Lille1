// Calcul de la norme du gradient par masque de Sobel
//
requires("1.41i");	// requis par substring(string, index)
setBatchMode(true);	// false pour déboguer

/****** Création des images ******/
sourceImage = getImageID();
filename = getTitle();
extension = "";
if (lastIndexOf(filename, ".") > 0) {
    extension = substring(filename, lastIndexOf(filename, "."));
    filename = substring(filename, 0, lastIndexOf(filename, "."));
}
filenameDerX = filename+"_der_x"+extension; // images des
filenameDerY = filename+"_der_y"+extension; // dérivées
run("Duplicate...", "title="+filenameDerX);
run("Duplicate...", "title="+filenameDerY);

selectWindow(filenameDerX);
run("32-bit");	// conversion en Float avant calcul des dérivées !!
run("Convolve...", "text1=[1 0 -1\n2 0 -2\n1 0 -1\n] normalize");

selectWindow(filenameDerY);
run("32-bit");	// conversion en Float avant calcul des dérivées !!
run("Convolve...", "text1=[1 2 1\n0 0 0\n-1 -2 -1\n] normalize");

/****** Calcul de la norme du gradient ******/
// récupération de la taille de l'image
w = getWidth();
h = getHeight();
// Calculs pour chaque pixel
x_img = newArray(w*h); 
y_img = newArray(w*h);
g_img = newArray(w*h);

selectWindow(filenameDerX); 
for (y=0; y<h; y++) { 
        for (x=0; x<w; x++) { 
                x_img[x+(w*y)]=getPixel(x, y);
        } 
} 

selectWindow(filenameDerY); 
for (y=0; y<h; y++) { 
        for (x=0; x<w; x++) { 
                y_img[x+(w*y)]=getPixel(x, y); 
        } 
}

newImage("output_grad", "32-bit", w, h, 1); 
for (y=0; y<h; y++) { 
        for (x=0; x<w; x++) {
                setPixel(x, y, atan2(y_img[x+(w*y)],x_img[x+(w*y)]));
                g_img[x+(w*y)]= (atan2(y_img[x+(w*y)],x_img[x+(w*y)]) * 180) / 3.14;
        } 
}


newImage("output_grad_final", "32-bit", w, h, 1); 
for (y=1; y<h-1; y++) { 
        for (x=1; x<w-1; x++) {
                
                if ((g_img[x+(w*y)] >= -180) && (g_img[x+(w*y)] < -135)) {
                	grad1 = g_img[x-1+(y*w)];
            		grad2 = g_img[x+1+(y*w)];
                }
                else if ((g_img[x+(w*y)] >= -135) && (g_img[x+(w*y)] < -90)) {
                	grad1 = g_img[x-1 + (y*w)-1];
            		grad2 = g_img[x+1 + (w*y)+1];
                }
                else if ((g_img[x+(w*y)] >= -90) && (g_img[x+(w*y)] < -45)) {
                	grad1 = g_img[x + (w*y)-1];
            		grad2 = g_img[x-1 + (w*y)+1];
                }
                else if ((g_img[x+(w*y)] >= -45) && (g_img[x+(w*y)] < 0)) {
                	grad1 = g_img[x+1 + (w*y)-1];
            		grad2 = g_img[x-1+ (w*y)+1];
                }
                else if ((g_img[x+(w*y)] >= 0) && (g_img[x+(w*y)] < 45)) {
                	grad1 = g_img[x+1 + w* y];
            		grad2 = g_img[x-1 + w* y];
                }
                else if ((g_img[x+(w*y)] >= 45) && (g_img[x+(w*y)] < 90)) {
                	grad1 = g_img[x-1 + (w*y)-1];
            		grad2 = g_img[x+1+(w*y)+1];
                }
                else if ((g_img[x+(w*y)] >= 90) && (g_img[x+(w*y)] < 135)) {
                	grad1 = g_img[x+(w*y)-1];
            		grad2 = g_img[x-1 + (w*y)+1];
                }
                else if ((g_img[x+(w*y)] >= 135) && (g_img[x+(w*y)] <= 181)) {
                	grad1 = g_img[x-1 + (w*y)+1];
            		grad2 = g_img[x+1 + (w*y)-1];
                }
                else {
                	print("error " + g_img[x+(w*y)]);
                }
                
                if ((g_img[x+(w*y)] > grad1) && (g_img[x+(w*y)] < grad2)) {
					setPixel(x, y, 255);
                } else {
                	setPixel(x, y, 0);
                }
        } 
}

updateDisplay();
setBatchMode("exit and display");
